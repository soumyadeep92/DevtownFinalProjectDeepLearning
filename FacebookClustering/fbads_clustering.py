# -*- coding: utf-8 -*-
"""FBAds-Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NkglsVHkvWbrcc57icJAifJusRWOxT25

## Facebook Ads Clustering

## 1. Importing the libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
import seaborn as sns

"""## 2. Importing the dataset and reading it"""

df=pd.read_csv('/content/KAG_conversion_data.csv')
df.head()

"""## 3. Data Cleaning"""

print(df['fb_campaign_id'].unique().shape)
print(df['fb_campaign_id'].shape)

campaign_arr=[]
index_campaign=[]
for i in df['fb_campaign_id'].unique():
  campaign_arr.append(i)
print(len(campaign_arr))
j=0
for i in range(len(df['fb_campaign_id'])):
    if(df['fb_campaign_id'][i]==(campaign_arr[j])):
      index_campaign.append(i)
      j+=1
print(len(index_campaign))

interest_arr=[]
impression_arr=[]
age_arr=[]
for i in index_campaign:
  interest_arr.append(df['interest'][i])
  impression_arr.append(df['Impressions'][i])
  age_arr.append(df['age'][i])
print(len(interest_arr))
print(len(impression_arr))

"""## 4. Preparing final dataframe"""

final_dataset=pd.DataFrame()
final_dataset_cols=['Fb_Campaign_id','Age','Interest','Impressions']
fin_ds=[campaign_arr,age_arr,interest_arr,impression_arr]
for i in range(len(final_dataset_cols)):
  final_dataset[final_dataset_cols[i]]=fin_ds[i]
print(final_dataset)

"""## 5. Data analysis and visualization"""

plt.figure(figsize=(8,9))
plt.imshow(np.array(final_dataset['Interest'][0:225]).reshape(15,15), cmap='viridis')
plt.colorbar()
plt.savefig('Plot 1')
plt.show()

sns.displot(final_dataset['Impressions'],bins=20)
sns.displot(df['Impressions'],bins=20)
sns.displot(df['interest'],bins=20)
sns.displot(final_dataset['Interest'],bins=20)
plt.savefig('Plot 2')
plt.show()

plt.figure(figsize=(8,8))
df['age'].value_counts().plot(kind='pie',autopct='%.2f%%',shadow=True,startangle=115)
plt.savefig('Plot 3')
plt.show()

sns.histplot(data=df, x='age', hue='gender', binwidth=9, multiple='stack',palette='Pastel1').set_title('Age ditribution') 
plt.savefig('Plot 4')
plt.show()

plt.scatter(final_dataset['Interest'][0:690:10],final_dataset['Impressions'][0:690:10])
plt.title('Scatter Plot for interest vs impressions')
plt.xlabel('Interests')
plt.ylabel('Impressions')
plt.savefig('Plot 4')
plt.show()

sns.displot(x="Impressions", data=df, kde=True, bins=20, color='brown')  
plt.text(0, 28, 'Impressions', fontfamily='serif', fontsize=17, fontweight='bold')
plt.savefig('Plot 5')
plt.show()

plt.figure(figsize=(25,8))
ax = sns.violinplot(x="age", y="interest", hue="gender",data=df, palette="Set2", split=True,scale="count", inner="quartile")
plt.savefig('Plot 6')
plt.show()

"""## 6. KMeans Clustering with the dataset"""

print(final_dataset['Interest'][0:690:10].shape)

km=KMeans(n_clusters=3)
km

ds_inter_impr=pd.DataFrame()
ds_inter_impr['Fb_Campaign_id']=final_dataset['Fb_Campaign_id'][0:690:10]
ds_inter_impr['Age']=final_dataset['Age'][0:690:10]
ds_inter_impr['Interest']=final_dataset['Interest'][0:690:10]
ds_inter_impr['Impressions']=final_dataset['Impressions'][0:690:10]
y_pred=km.fit_predict(ds_inter_impr[['Interest','Impressions']])
y_pred

ds_inter_impr['Clusters']=y_pred
ds_inter_impr

"""## 7. Plotting the unbaised cluster"""

df0=ds_inter_impr[ds_inter_impr.Clusters==0]
df1=ds_inter_impr[ds_inter_impr.Clusters==1]
df2=ds_inter_impr[ds_inter_impr.Clusters==2]

plt.scatter(df0['Interest'],df0['Impressions'],color='red')
plt.scatter(df1['Interest'],df1['Impressions'],color='green')
plt.scatter(df2['Interest'],df2['Impressions'],color='blue')
plt.title('Scatter Plot for interest vs impressions')
plt.xlabel('Interests')
plt.ylabel('Impressions')
plt.legend(labels=('Cluster 1','Cluster 2','Cluster 3'),loc='upper left')
plt.savefig('Plot 7')
plt.show()

"""## 8. Scaling Data using MinMax"""

scaler=MinMaxScaler()
scaler.fit(ds_inter_impr[['Impressions']])
ds_inter_impr['Impressions']=scaler.transform(ds_inter_impr[['Impressions']])
scaler.fit(ds_inter_impr[['Interest']])
ds_inter_impr['Interest']=scaler.transform(ds_inter_impr[['Interest']])

ds_inter_impr

"""## 9. Preparing final KMeans cluster for biasing the data"""

km=KMeans(n_clusters=3)
y_pred=km.fit_predict(ds_inter_impr[['Interest','Impressions']])
y_pred

ds_inter_impr['Clusters']=y_pred
ds_inter_impr

ds_inter_impr['Clusters'].unique()

km.cluster_centers_

df0=ds_inter_impr[ds_inter_impr.Clusters==0]
df1=ds_inter_impr[ds_inter_impr.Clusters==1]
df2=ds_inter_impr[ds_inter_impr.Clusters==2]

"""## 10. Scatter plot with located centroids"""

plt.scatter(df0['Interest'],df0['Impressions'],color='red')
plt.scatter(df1['Interest'],df1['Impressions'],color='green')
plt.scatter(df2['Interest'],df2['Impressions'],color='blue')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],marker='*',color='black',label='centroid')
plt.title('Scatter Plot for interest vs impressions')
plt.xlabel('Interests')
plt.ylabel('Impressions')
plt.legend(labels=('Cluster 1','Cluster 2','Cluster 3'),loc='upper left')
plt.savefig('Plot 8')
plt.show()

"""## 11. Finding and plotting Sum of squared error"""

sse=[]
for i in range(1,10):
  km1=KMeans(n_clusters=i)
  km1.fit(ds_inter_impr[['Interest','Impressions']])
  sse.append(km1.inertia_)
print(sse)

plt.xlabel('Range')
plt.ylabel('Sum of squared error')
plt.plot(range(1,10),sse)
plt.savefig('Plot 9')
plt.show()

"""## 12. Final prediction and output"""

pred_cluster=int(km.predict([[0.138762,0.8201]]))
x_int=[i for i in ds_inter_impr['Interest'] if i<0.14 and i>0.13][0]
x_imp=[j for j in ds_inter_impr['Impressions'] if j<0.80 and j>0.7][0]
act_cluster=int(km.predict([[x_int,x_imp]]))
print(x_int,x_imp)
print("Actual cluster: ",act_cluster)
print("Predicted cluster: ",pred_cluster)
print("Thus the cluster belongs to::-> ")
ser_int=[j for j in ds_inter_impr['Interest']]
print(ser_int[67])
x1_int=ser_int.index(x_int)
ser_imp=[k for k in ds_inter_impr['Impressions']]
x1_imp=ser_imp.index(x_imp)
print(x1_int,x1_imp)
# print(ds_inter_impr['Impressions'])
print('Thus in this Fb Campaign the 18th predicted value of interest and the 67th predicted value of impressions in the dataset is with respect to Cluster 1 or Group 2\n\n')
print('Result: ')
print('1. Fb_Campaign_id :',ds_inter_impr['Fb_Campaign_id'][180],
      '\t2. Age :',ds_inter_impr['Age'][180],
      '\t3. Interest :',df['interest'][180],
      '\t4. Impressions :',df['Impressions'][180])
print('1. Fb_Campaign_id :',ds_inter_impr['Fb_Campaign_id'][670],
      '\t2. Age :',ds_inter_impr['Age'][670],
      '\t3. Interest :',df['interest'][670],
      '\t4. Impressions :',df['Impressions'][670])
print('\n\n\n')

