# -*- coding: utf-8 -*-
"""Top_Fifty_Revenues.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjyI9Hq8env5EYG-K5Z9pyzuMsJ1yxo9

## Top 50 Revenues of XYZ company

## 1. Importing the libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
plt.rc("font", size=14)
sns.set(style="white")
sns.set(style ="whitegrid", color_codes=True)
import numpy as np
import warnings
warnings.filterwarnings("ignore")

"""## 2. Importing and reading the dataset"""

df=pd.read_csv('C:/Users/Dipak/Desktop/Devtown-Final-SubmissionProject-2022/Web_pages/Top50Revenues/data50.csv')
df.head()

"""## 3. Data Preparation"""

df['Revenue']=df['R&D Spend']+df['Administration']+df['Marketing Spend']+df['Profit']
df.shape

print(list(df.columns))

df.isnull().sum()

print(df['R&D Spend'].unique().shape)
print(df['Administration'].unique().shape)
print(df['Marketing Spend'].unique().shape)
print(df['Profit'].unique().shape)

"""## 4. Creating the independent and target variables"""

input_cols=['R&D Spend',	'Administration',	'Marketing Spend', 'Profit']
input_cols_new=['R&D_Spend',	'Administration',	'Marketing_Spend', 'Profit']

target_cols=['Revenue']

data_pd=pd.DataFrame()
for i in range(len(input_cols)):
  data_pd[input_cols_new[i]]=df[input_cols[i]]
data_pd.head()

y=pd.DataFrame()
y['Revenue']=df['Revenue']
y.head()

"""## 5. Data Exploratory Analysis"""

sns.set(rc={'figure.figsize':(11, 8)})
sns.distplot(y['Revenue'], bins= 30)
plt.savefig('Plot A')
plt.show()

plt.figure(figsize=(10,10))
plt.bar(data_pd['Administration'][0:50:2]/100000,data_pd['Profit'][0:50:2]/1000000,width=0.01)
plt.title('Scaled Administration Cost vs Profit')
plt.xlabel('Administration Cost')
plt.ylabel('Profit')
plt.savefig('Plot B')
plt.show()

plt.figure(figsize=(10,10))
plt.barh(data_pd['Marketing_Spend'][0:50:5]/100000,data_pd['R&D_Spend'][0:50:5]/1000000,height=0.1,color='red')
plt.title('Scaled Marketing_Spend vs R&D_Spend')
plt.xlabel('Marketing Spend')
plt.ylabel('R&D Spend')
plt.savefig('Plot C')
plt.show()

from scipy.stats import burr12
# Drawing regression line
plt.scatter(data_pd[0:]['Profit'],y)
plt.scatter(data_pd[0:]['R&D_Spend'],y)
# plt.scatter(data_pd[0:]['Administration'],y)
m, b=np.polyfit(data_pd[0:]['Profit'],y,1)
m1, b1=np.polyfit(data_pd[0:]['R&D_Spend'],y,1)
# m2, b2=np.polyfit(data_pd[0:]['Administration'],y,1)
plt.plot(data_pd[1:]['Profit'],m*data_pd[1:]['Profit']+b,color='red')
plt.plot(data_pd[1:]['R&D_Spend'],m1*data_pd[1:]['R&D_Spend']+b1,color='green')
# plt.plot(data_pd[1:]['Administration'],m2*data_pd[1:]['Administration']+b2,color='brown')
plt.savefig('Plot D')
plt.show()

"""## 6. Splitting train and test data"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(data_pd,y,test_size=0.2,random_state=42)

"""## 7. Correlating the dataset parameters"""

corr_matrix=data_pd.corr()
sns.heatmap(data=corr_matrix, annot= True)
plt.savefig('Plot E')
plt.show()

"""## 8. Performing Linear Regression"""

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)

model.coef_

model.intercept_

"""## 9. Predicting the output"""

y_pred_data=model.predict(data_pd)

"""## 10. Dimensionally reduced plot of the final model"""

plt.scatter(data_pd[0:]['Administration'],y_pred_data)
plt.scatter(data_pd[0:]['R&D_Spend'],y_pred_data)
plt.scatter(data_pd[0:]['Marketing_Spend'],y_pred_data)
plt.scatter(data_pd[0:]['Profit'],y_pred_data)
plt.legend(labels=('Administration','R&D_Spend','Marketing_Spend','Profit'))
plt.savefig('Plot F')
plt.show()

print("The equation of the multivariate linear regression is: ")
col_vars=list(data_pd.columns.values)
print(col_vars)

x_eq=''
for i in range(len(col_vars)):
  x_eq+=str(model.coef_[0][i])+"*"+col_vars[i]+"+"
x_eq=x_eq+str(int(model.intercept_))
print(x_eq)

y_pred=model.predict(x_test)
print("Two Samples of predicted revenue on the test set y_test is: ")
print(int(y_pred[0]))
print(int(y_pred[1]))

"""## 11. Output and Resultant Prediction"""

R_cost=input("Enter R&D Spend: ")
A_cost=input("Enter Admin Spend: ")
M_cost=input("Enter Marketing Spend: ")
Profit=input("Enter profit: ")
Revenue=model.predict([[R_cost,A_cost,M_cost,Profit]])[0][0].round(2)
print("Estimated revenue on sample data: ",Revenue)

"""## 12. Accuracy metrics"""

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
score= r2_score(y_test, y_pred)
print("r2 score is ", score)
absolute_error= mean_absolute_error(y_test, y_pred)
mean_error= mean_squared_error(y_test, y_pred)
print("Mean absolute error is ", absolute_error)
print("Mean squared error is ", mean_error)

"""## Saving the model file"""

#import pickle
#pickle.dump(model, open('model.pkl','wb'))